package com.cesar31.imggenerator.parser;

import com.cesar31.imggenerator.model.*;
import com.cesar31.imggenerator.control.*;
import com.cesar31.imggenerator.structures.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;

class ImageParser;

parser code {:

	private ParserController controller;

	public ImageParser(ImageLex lex, ParserController controller) {
		super(lex);
		this.controller = controller;
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public ParserController getController() {
		return controller;
	}

:}

terminal COLON, COMMA, SEMI_COLON, RBRACE, LBRACE;
terminal String USER_NAME, COLOR;
terminal Integer INTEGER;
terminal ERROR;

non terminal make_users, user;

non terminal List<Integer> make_numbers, ids;
non terminal MatrixNode cell;
non terminal SparseMatrix make_cells;
non terminal AVLNode layer;
non terminal AVLTree make_layers;
non terminal Object data;
non terminal ListNode image;
non terminal CircularList make_images;

data
	::= make_layers:tree
		{:
			/* Arbol de capas */
			RESULT = tree;
		:}
	| make_images:list
		{:
			RESULT = list;
		:}
	| make_users
	{: System.out.println("usuarios"); :}
	;

/* capas */
make_layers
	::= layer:node
		{:
			AVLTree tree = new AVLTree();
			tree.insert(node);
			RESULT = tree;
		:}
	| make_layers:tree layer:node
		{:
			tree.insert(node);
			RESULT = tree;
		:}
	;

layer
	::= INTEGER:id LBRACE make_cells:matrix RBRACE
		{:
			/* SparseMatrix */
			matrix.setId(id);
			AVLNode node = new AVLNode(id, matrix);
			RESULT = node;
		:}
	;

make_cells
	::= cell:c
		{:
			SparseMatrix matrix = new SparseMatrix();
			if(c != null) {
				matrix.insert(c);
			}
			RESULT = matrix;
		:}
	| make_cells:matrix cell:c
		{:
			if(c != null) {
				matrix.insert(c);
			}
			RESULT = matrix;
		:}
	;

cell
	::= make_numbers:list COMMA COLOR:color SEMI_COLON
		{:
			/* MatrixNode */
			MatrixNode node = controller.getMatrixNode(list, color);
			if(node != null) {
				RESULT = node;
			} else {
				/* Error */
			}
		:}
	;

/* imagenes */
make_images
	::= image:node
		{:
			CircularList list = new CircularList();
			if(node != null) {
				list.insertar(node);
			}
			RESULT = list;
		:}
	| make_images:list image:node
		{:
			if(node != null) {
				list.insertar(node);
			}
			RESULT = list;
		:}
	;

image
	::= INTEGER:id LBRACE ids:list RBRACE
		{:
			ListNode node = controller.getImage(id, list);
			if(node != null) {
				RESULT = node;
			}
		:}
	;

ids
	::= make_numbers:list
		{:
			RESULT = list;
		:}
	|
		{: RESULT = new ArrayList<>(); :}
	;

make_numbers
	::= INTEGER:n
		{:
			List<Integer> numbers = new ArrayList<>();
			numbers.add(n);
			RESULT = numbers;
		:}
	| make_numbers:list COMMA INTEGER:n
		{:
			list.add(n);
			RESULT = list;
		:}
	;

/* usuarios */
make_users
	::= user
	| make_users user
	;

user
	::= USER_NAME COLON ids SEMI_COLON
	;
