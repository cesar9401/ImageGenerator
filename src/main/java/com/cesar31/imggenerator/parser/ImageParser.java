
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.imggenerator.parser;

import com.cesar31.imggenerator.model.*;
import com.cesar31.imggenerator.control.*;
import com.cesar31.imggenerator.structures.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ImageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ImageParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ImageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ImageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ImageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\012\003\000\002\002\004\000\002\012" +
    "\003\000\002\012\003\000\002\010\003\000\002\010\004" +
    "\000\002\006\006\000\002\005\003\000\002\005\004\000" +
    "\002\004\006\000\002\014\003\000\002\014\004\000\002" +
    "\013\006\000\002\003\003\000\002\003\002\000\002\002" +
    "\003\000\002\002\005\000\002\011\003\000\002\011\004" +
    "\000\002\007\006\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\010\012\007\013\004\014\006\001\002\000" +
    "\004\004\uffec\001\002\000\004\004\047\001\002\000\004" +
    "\010\045\001\002\000\004\004\uffed\001\002\000\006\002" +
    "\ufff7\014\ufff7\001\002\000\010\002\ufff0\012\ufff0\013\ufff0" +
    "\001\002\000\004\002\044\001\002\000\006\002\001\014" +
    "\031\001\002\000\006\002\ufffd\014\ufffd\001\002\000\010" +
    "\002\ufffe\012\007\013\004\001\002\000\006\002\uffff\014" +
    "\017\001\002\000\004\010\021\001\002\000\006\002\ufff6" +
    "\014\ufff6\001\002\000\006\007\ufff3\014\022\001\002\000" +
    "\010\005\ufff2\006\ufff2\007\ufff2\001\002\000\004\007\027" +
    "\001\002\000\010\005\025\006\ufff4\007\ufff4\001\002\000" +
    "\004\014\026\001\002\000\010\005\ufff1\006\ufff1\007\ufff1" +
    "\001\002\000\006\002\ufff5\014\ufff5\001\002\000\010\002" +
    "\uffef\012\uffef\013\uffef\001\002\000\004\010\033\001\002" +
    "\000\006\002\ufffc\014\ufffc\001\002\000\004\014\022\001" +
    "\002\000\006\007\ufffa\014\ufffa\001\002\000\006\007\043" +
    "\014\022\001\002\000\004\005\037\001\002\000\006\013" +
    "\040\014\026\001\002\000\004\006\041\001\002\000\006" +
    "\007\ufff8\014\ufff8\001\002\000\006\007\ufff9\014\ufff9\001" +
    "\002\000\006\002\ufffb\014\ufffb\001\002\000\004\002\000" +
    "\001\002\000\006\007\ufff3\014\022\001\002\000\006\005" +
    "\037\007\ufff4\001\002\000\006\006\ufff3\014\022\001\002" +
    "\000\004\006\051\001\002\000\010\002\uffee\012\uffee\013" +
    "\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\022\006\013\007\010\010\012\011\014\012" +
    "\011\013\007\014\015\015\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\031\001\001\000\002\001\001\000\006\007\027\015" +
    "\004\001\001\000\004\013\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\023\003\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\035" +
    "\004\033\005\034\001\001\000\002\001\001\000\006\002" +
    "\035\004\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\045\003\022" +
    "\004\033\005\034\001\001\000\002\001\001\000\006\002" +
    "\023\003\047\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ImageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ImageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ImageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ParserController controller;

	public ImageParser(ImageLex lex, ParserController controller) {
		super(lex);
		this.controller = controller;
	}

	public void syntax_error(Symbol cur_token) {
        System.out.printf("syntax_error: Linea: %d, columna: %d, sym: %s, nombre: %s, value: \"%s\", parse_state: %d\n", cur_token.left, cur_token.right, cur_token.sym, symbl_name_from_id(cur_token.sym), cur_token.value, cur_token.parse_state);
        List<Integer> tokens = expected_token_ids();
        System.out.print("Se esperaba ->");
        for(Integer i : tokens) {
			System.out.printf("%s, ", symbl_name_from_id(i));
        }
        System.out.println("");
	}

	public ParserController getController() {
		return controller;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ImageParser$actions {
  private final ImageParser parser;

  /** Constructor */
  CUP$ImageParser$actions(ImageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ImageParser$do_action_part00000000(
    int                        CUP$ImageParser$act_num,
    java_cup.runtime.lr_parser CUP$ImageParser$parser,
    java.util.Stack            CUP$ImageParser$stack,
    int                        CUP$ImageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ImageParser$result;

      /* select the action based on the action number */
      switch (CUP$ImageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // data ::= make_layers 
            {
              Object RESULT =null;
		int treeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int treeright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		AVLTree tree = (AVLTree)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			/* Arbol de capas */
			RESULT = tree;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("data",8, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= data EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		RESULT = start_val;
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ImageParser$parser.done_parsing();
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // data ::= make_images 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		CircularList list = (CircularList)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			RESULT = list;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("data",8, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // data ::= make_users 
            {
              Object RESULT =null;
		int treeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int treeright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		AVLTree tree = (AVLTree)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			RESULT = tree;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("data",8, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // make_layers ::= layer 
            {
              AVLTree RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		AVLNode node = (AVLNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			AVLTree tree = new AVLTree();
			if(node != null) {
				tree.insert(node);
			}
			RESULT = tree;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_layers",6, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // make_layers ::= make_layers layer 
            {
              AVLTree RESULT =null;
		int treeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int treeright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		AVLTree tree = (AVLTree)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		AVLNode node = (AVLNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			if(node != null) {
				tree.insert(node);
			}
			RESULT = tree;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_layers",6, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // layer ::= INTEGER LBRACE make_cells RBRACE 
            {
              AVLNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).value;
		int matrixleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int matrixright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		SparseMatrix matrix = (SparseMatrix)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		
			/* SparseMatrix */
			matrix.setId(id);
			AVLNode node = new AVLNode(String.valueOf(id), matrix);
			RESULT = node;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("layer",4, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // make_cells ::= cell 
            {
              SparseMatrix RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		MatrixNode c = (MatrixNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			SparseMatrix matrix = new SparseMatrix();
			if(c != null) {
				matrix.insert(c);
			}
			RESULT = matrix;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_cells",3, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // make_cells ::= make_cells cell 
            {
              SparseMatrix RESULT =null;
		int matrixleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int matrixright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		SparseMatrix matrix = (SparseMatrix)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		MatrixNode c = (MatrixNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			if(c != null) {
				matrix.insert(c);
			}
			RESULT = matrix;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_cells",3, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cell ::= make_numbers COMMA COLOR SEMI_COLON 
            {
              MatrixNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		
			/* MatrixNode */
			MatrixNode node = controller.getMatrixNode(list, color);
			if(node != null) {
				RESULT = node;
			} else {
				/* Error */
			}
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("cell",2, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // make_images ::= image 
            {
              CircularList RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		ListNode node = (ListNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			CircularList list = new CircularList();
			if(node != null) {
				list.insertar(node);
			}
			RESULT = list;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_images",10, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // make_images ::= make_images image 
            {
              CircularList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		CircularList list = (CircularList)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		ListNode node = (ListNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			if(node != null) {
				list.insertar(node);
			}
			RESULT = list;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_images",10, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // image ::= INTEGER LBRACE ids RBRACE 
            {
              ListNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		
			ListNode node = controller.getImage(id, list);
			if(node != null) {
				RESULT = node;
			}
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("image",9, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ids ::= make_numbers 
            {
              List<Integer> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			RESULT = list;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ids ::= 
            {
              List<Integer> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("ids",1, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // make_numbers ::= INTEGER 
            {
              List<Integer> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			List<Integer> numbers = new ArrayList<>();
			numbers.add(n);
			RESULT = numbers;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_numbers",0, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // make_numbers ::= make_numbers COMMA INTEGER 
            {
              List<Integer> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			list.add(n);
			RESULT = list;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_numbers",0, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // make_users ::= user 
            {
              AVLTree RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		AVLNode node = (AVLNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			AVLTree tree = new AVLTree();
			if(node != null) {
				tree.insert(node);
			}
			RESULT = tree;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_users",7, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // make_users ::= make_users user 
            {
              AVLTree RESULT =null;
		int treeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int treeright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		AVLTree tree = (AVLTree)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		AVLNode node = (AVLNode)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		
			if(node != null) {
				tree.insert(node);
			}
			RESULT = tree;
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("make_users",7, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // user ::= name COLON ids SEMI_COLON 
            {
              AVLNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		List<Integer> list = (List<Integer>)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		
			AVLNode node = controller.getUser(p, list);
			if(node != null) {
				RESULT = node;
			}
		
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("user",5, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-3)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // name ::= USER_NAME 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("name",11, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // name ::= COLOR 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("name",11, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ImageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ImageParser$do_action(
    int                        CUP$ImageParser$act_num,
    java_cup.runtime.lr_parser CUP$ImageParser$parser,
    java.util.Stack            CUP$ImageParser$stack,
    int                        CUP$ImageParser$top)
    throws java.lang.Exception
    {
              return CUP$ImageParser$do_action_part00000000(
                               CUP$ImageParser$act_num,
                               CUP$ImageParser$parser,
                               CUP$ImageParser$stack,
                               CUP$ImageParser$top);
    }
}

}
